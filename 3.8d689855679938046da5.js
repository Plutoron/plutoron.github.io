(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{17:function(e,n,t){"use strict";t.r(n);var p=t(0),o=t(2);t(312);n.default=function(){var e=Object(o.useParams)().fileName;return p.createElement("article",{className:"markdown-body mt20 mb20",dangerouslySetInnerHTML:{__html:t(313)("./".concat(e))}})}},312:function(e,n,t){},313:function(e,n,t){var p={"./19.10.12-webpack4新手向 copy.md":314,"./19.10.12-新的开始.md":315,"./19.10.15-webpack4+react+babel 踩坑.md":316,"./19.10.18-搭建自己的Github Page.md":317};function o(e){var n=r(e);return t(n)}function r(e){if(t.o(p,e))return p[e];var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}o.keys=function(){return Object.keys(p)},o.resolve=r,(e.exports=o).id=313},314:function(e,n){e.exports='<h3 id="webpack4新手向">webpack4新手向</h3>\n<p>写自己配置webpack的经历 </p>\n<p>参考资料：<br><a href="https://www.webpackjs.com/guides/">webpack 中文文档 指南栏</a><br><a href="https://webpack.js.org/guides/">webpack 英文文档 指南栏</a><br>ps: 感觉 英文 Configuration 栏 看着舒服 知道 是哪个配置项</p>\n<h4 id="初始化webpack">初始化webpack</h4>\n<p>安装 webpack &amp; webpack-cli</p>\n<pre><code>npm init -y\nnpm install webpack webpack-cli --save-dev</code></pre><p>添加webpack配置文件 webpack.config.js</p>\n<pre><code>const path = require(&#39;path&#39;);\n\nmodule.exports = {\n  entry: &#39;./src/index.js&#39;,\n  output: {\n    filename: &#39;bundle.js&#39;,\n    path: path.resolve(__dirname, &#39;dist&#39;)\n  }\n}</code></pre><p>package.json 的 scripts 中添加 build 命令</p>\n<pre><code>&quot;build&quot;: &quot;webpack --mode production&quot;,</code></pre><p>这样 我们就可以 <em>npm run build</em> 打包我们的代码了</p>\n<p>根据上面的配置:<br>入口文件： <em>src/index.js</em><br>打包后的目录： <em>dist</em>  </p>\n<pre><code>  |- package.json\n+ |- webpack.config.js\n  |- /dist\n    |- bundle.js\n  |- /src\n    |- index.js</code></pre><h4 id="添加html模版">添加html模版</h4>\n<p>我们打包生成的js文件需要配合html文件，可以生成web入口。<br>我们可以通过 webpack的plugins配置项，添加 html-webpack-plugin，生成一个html入口模版</p>\n<p>安装html-webpack-plugin依赖</p>\n<pre><code>npm i html-webpack-plugin -D</code></pre><p>修改webpack.config.js </p>\n<pre><code>const htmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;)\n\nmodule.exports = {\n  ...\n  plugins: [\n    new HtmlwebpackPlugin({\n      title: &#39;title 参数 生成的html模板的title。但指定了 template 后 该参数无效！！！&#39;\n      filename: &#39;xxxx.html&#39;,   // build后html文件名\n      template: &#39;./src/index.html&#39;  // 入口html文件模板，不指定的话，会默认生成 一个html模版\n    })\n  ]\n}</code></pre><p><em>基本模版内容仅供参考</em>\n需放到上面配置的template对应目录</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset=&quot;UTF-8&quot;&gt;\n  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n  &lt;title&gt;React App&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre><p>打包后的文件结构</p>\n<pre><code>  |- package.json\n  |- webpack.config.js\n  |- /dist\n    |- bundle.js\n  + |- xxx.html\n  |- /src\n    |- index.js</code></pre><h4 id="可以开始开发react了">可以开始开发React了</h4>\n<p>webpack-dev-server登场</p>\n<pre><code>npm i webpack-dev-server --save-dev</code></pre><p>安装React &amp; React-Dom</p>\n<pre><code>npm i react react-dom -S</code></pre><p>package.json 的 scripts 中添加 start 命令</p>\n<pre><code>&quot;start&quot;: &quot;webpack-dev-server --mode development --open --hot&quot;,</code></pre><p>这样 我们就可以 <em>npm start</em> 本地开发我们的项目了</p>\n<p>在src下 添加以下文件看看效果吧\n<em>src/index.js</em></p>\n<pre><code>import React from &#39;react&#39;\nimport ReactDOM from &#39;react-dom&#39;\nimport App from &#39;./components/app&#39;\n\nReactDOM.render(&lt;App /&gt;, document.getElementById(&#39;app&#39;))</code></pre><p><em>src/components/app.js</em></p>\n<pre><code>import React, { Component } from &#39;react&#39;\n\nexport default class App extends Component {\n  render() {\n    return (\n      &lt;div&gt;\n        test \n      &lt;/div&gt;\n    )\n  }\n}</code></pre><h4 id="添加-babel">添加 babel</h4>\n<p>安装依赖 <em>@babel/core @babel/preset-env @ bable/preset-react</em></p>\n<pre><code>npm install --save-dev @babel/core @babel/preset-env @ bable/preset-react</code></pre><p>添加 .babelrc 配置文件</p>\n<pre><code>// targets, useBuiltIns 等选项用于编译出兼容目标环境的代码\n// 其中 useBuiltIns 如果设为 &quot;usage&quot;\n// Babel 会根据实际代码中使用的 ES6/ES7 代码，以及与你指定的 targets，按需引入对应的 polyfill\n// 而无需在代码中直接引入 import &#39;@babel/polyfill&#39;，避免输出的包过大，同时又可以放心使用各种新语法特性。\n// 还需要指定corejs 版本\n{\n  &quot;presets&quot;: [\n    [\n      &quot;@babel/preset-env&quot;,\n      {\n        {\n          &quot;modules&quot;: false,\n          &quot;targets&quot;: {\n            &quot;browsers&quot;: [&quot;&gt; 1%&quot;, &quot;last 2 versions&quot;, &quot;not ie &lt;= 8&quot;]\n          },\n          &quot;useBuiltIns&quot;: &quot;usage&quot;,\n          &quot;corejs&quot;: 2\n        } \n      }\n    ],\n    &quot;@babel/preset-react&quot;\n  ]\n}</code></pre>'},315:function(e,n){e.exports='<h4 id="新的开始">新的开始</h4>\n<ul>\n<li>拥抱变化</li>\n<li>满怀信心</li>\n<li>HAPPY </li>\n</ul>\n'},316:function(e,n){e.exports='<h3 id="webpack4reactbabel-踩坑">webpack4+react+babel 踩坑</h3>\n<p>自己踩坑的经历 </p>\n<h4 id="react-router">react-router</h4>\n<p>issue: 定义的 BrowserRouter, 路由刷新 报 cannot get /xxx</p>\n<p>answer:  </p>\n<ul>\n<li><p>本地webpack 配置 </p>\n<pre><code>devServer: {\n  historyApiFallback: true,\n}</code></pre><p><em>只适合开发环境中进行配置</em>\n<em>线上环境需要服务器支持</em></p>\n</li>\n<li><p>BrowserRouter 改为 HashRouter   </p>\n<ol>\n<li>路由会有 # 号，影响美观</li>\n<li>不能使用服务器渲染</li>\n</ol>\n</li>\n</ul>\n<h4 id="babel7">Babel7</h4>\n<p>issue: Support for the experimental syntax &#39;classProperties&#39; isn&#39;t currently enabled </p>\n<p>answer: </p>\n<pre><code>npm i -D @babel/plugin-proposal-class-properties\n\n\n配置.babelrc \n\n{ \n  &quot;plugins&quot;: [ \n    [\n      &quot;@babel/plugin-proposal-class-properties&quot;, \n      { &quot;loose&quot;: true }\n    ] \n  ] \n}   \n</code></pre><p>issue: babel 在每个文件都插入了辅助代码，使代码体积过大！</p>\n<p>answer: </p>\n<pre><code>你必须执行 \nnpm install @babel/plugin-transform-runtime --save-dev 来把它包含到你的项目中，也要使用 \nnpm install babel-runtime --save-dev 把 babel-runtime 安装为一个依赖\n\n修改.babelrc\n\n&quot;plugins&quot;: [\n  ...\n  &quot;@babel/transform-runtime&quot;,\n  ...\n]</code></pre><p>issue: this.setDynamic is not a function</p>\n<p>answer: </p>\n<pre><code>babel7-\nnpm install babel-plugin-transform-runtime --save-dev\n\nbabel7+ 插件 修改\nnpm install @babel/plugin-transform-runtime --save-dev</code></pre>'},317:function(e,n){e.exports='<h3 id="搭建自己的github-page">搭建自己的Github Page</h3>\n<p>有两种方式</p>\n<ul>\n<li><p>创建一个 username.github.io repo<br>创建一个 index.md / index.html\n路径 在  <code>https://username.github.io</code></p>\n</li>\n<li><p>创建一个 xxx repo<br>创建一个 index.md / index.html<br>setting 下 选择 github page 打开 page 功能\n路径 在  <code>https://username.github.io/xxx</code></p>\n</li>\n</ul>\n<blockquote>\n<p>master 分支下 默认 读取 index 文件 作为 根路由。</p>\n</blockquote>\n<blockquote>\n<p>Github Page 的路由规则 是 托管 master 根目录下的 xxx.md(html)，对应 <code>https://username.github.io/xxx</code>。 </p>\n</blockquote>\n<blockquote>\n<p>index除外，index文件默认根路由。</p>\n</blockquote>\n<h4 id="这样我们-就可以-将我们-通过脚手架-build-后的文件-托管到-git-查看效果了">这样我们 就可以 将我们 通过脚手架 build 后的文件 托管到 git 查看效果了</h4>\n<p>我们的 单页面应用 路由 建议使用 HashRouter，因为 BroswerRouter 有问题</p>\n<p>ps: 等着看看是否解决 和 如何解决</p>\n<h4 id="我的经验">我的经验</h4>\n<h5 id="stage-1-本着各各代码库-各司其职的原则">stage 1: 本着各各代码库 各司其职的原则</h5>\n<pre><code>step 1:\n\ngit clone https://github.com/xxx/xxx.github.io.git  \n初始化 我们的 Github Pages 的本地库  \n\nstep 2:\n\n新建另一个开发代码库   \n初始化 开发框架 开发完 npm run build 生成 dist 目录\n\nstep 3:\n\n将 dist 目录下 的 文件 复制到 Github Page 库下 更新</code></pre><p><em>我的心路历程@1</em>  </p>\n<blockquote>\n<p>init github-page-repo -&gt; init work-repo -&gt; work done -&gt; build -&gt; move dist to github-page-repo -&gt; update</p>\n</blockquote>\n<p>大写的心累</p>\n<h5 id="stage-2-聪明一点的我，把开发库改成了-github-page-库下的-开发分支">stage 2: 聪明一点的我，把开发库改成了 Github Page 库下的 开发分支</h5>\n<pre><code>step 1:\n\ngit clone https://github.com/xxx/xxx.github.io.git  \n初始化 我们的 Github Pages 的本地库  \n\nstep 2:\ngit checkout -b dev\n新建另一个开发分支 \n初始化 开发框架 开发完 npm run build 生成 dist 目录\n\nstep 3:\n\n将 dist 目录下 的 文件 复制到 master 分支 更新</code></pre><p><em>我的心路历程@2</em></p>\n<blockquote>\n<p>init github-page-repo -&gt; checkout dev-branch -&gt; work done -&gt; build -&gt; move dist to master -&gt; update</p>\n</blockquote>\n<p>虽然依旧心累但是 只维护 一个库 不用 切文件夹 了，但是要切分支</p>\n<p><em>我的心路历程@2.1</em></p>\n<p>干嘛不用个脚本！！！</p>\n<blockquote>\n<p>添加 deploy.sh 一键 ./deploy.sh 部署发布</p>\n</blockquote>\n<pre><code class="language-shell">npm run build\ngit checkout master\nrm -rf main.js\nrm -rf index.html\nrm -rf common.*.js\nrm -rf common.*.css\nmv dist/* ./\ngit add .\ngit commit -m &#39;commit message&#39;\ngit push origin master\ngit checkout dev</code></pre>\n<p>Because of Lan, I become stronger!!!</p>\n'}}]);